---
title: "Final Project: Reproducible Research"
author: "Xinyi Zhou, and Wuzhen Han"
date: 11/28/2024
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---
### Merge Data 

```{python}
import pandas as pd

real_gdp_path = '/Users/wuzhenhan/Desktop/final-project-xy-wz/data/real_GDP.csv'
unemployment_rate_path = '/Users/wuzhenhan/Desktop/final-project-xy-wz/data/Unemployment_rate.csv'

real_gdp = pd.read_csv(real_gdp_path)
unemployment_rate = pd.read_csv(unemployment_rate_path)

real_gdp['DATE'] = pd.to_datetime(real_gdp['DATE'])
unemployment_rate['DATE'] = pd.to_datetime(unemployment_rate['DATE'])

merged_data = pd.merge(real_gdp, unemployment_rate, on='DATE', how='left')

save_path = '/Users/wuzhenhan/Desktop/final-project-xy-wz/data/merged_data.csv'
merged_data.to_csv(save_path, index=False)

print(f"The merger is complete! Data has been saved to: {save_path}")

```

### Data Preprocessing and Static graph

# 1.Bar chart of state-level CARES Act funding distribution

```{python}
import pandas as pd
import matplotlib.pyplot as plt

file_path = '/Users/wuzhenhan/Desktop/final-project-xy-wz/data/cares_act_funding.csv'

data = pd.read_csv(file_path)

total_allocation = data[data['Jurisdiction'] == 'Total Allocation']

total_allocation = total_allocation.copy() 
total_allocation['Amount'] = total_allocation['Amount'].replace({r'\$': '', ',': ''}, regex=True).astype(float)

total_allocation = total_allocation.sort_values(by='Amount', ascending=False)

plt.figure(figsize=(14, 8))
plt.bar(total_allocation['State'], total_allocation['Amount'] / 1e9, color='skyblue')  

plt.title('CARES Act Funding Distribution by State', fontsize=16)
plt.xlabel('State', fontsize=12)
plt.ylabel('Total Funding (in Billion USD)', fontsize=12)

plt.xticks(rotation=90)

plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

top_3_states = total_allocation.head(3)
print("The top three states with the highest grant amounts（Round it up）:")
for idx, row in top_3_states.iterrows():
    print(f"{row['State']}: ${row['Amount'] / 1e9:.2f} billion")

```
